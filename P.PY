# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

# =======================
# DATOS BASE DEL TABLERO
# =======================
estrategias = {
    "Desarrollo profesional": [
        ("Cursos/certificaciones completadas", "Lean Six Sigma black Belt"),
        ("Cursos/certificaciones completadas", "Ingl√©s"),
        ("Cursos/certificaciones completadas", "Scrum")
    ],
    "Resultados en el trabajo": [
        ("Cumplimiento a entregas", "95%"),
        ("Reducci√≥n de cartera vencida", "18 clientes")
    ],
    "Personalidad, Salud y Energ√≠a": [
        ("Horas de ejercicio por semana", "4 hrs de ejercicio semanales"),
        ("Hablar en Publico", "Dar 3 presentaciones en 2026"),
        ("Imagen Profesional", "Actualizar guardarropa antes de marzo 2026 + retro de 2 colegas")
    ],
    "Finanzas personales y crecimiento econ√≥mico": [
        ("Ahorro mensual acumulado", "Ahorro de 6 meses de salario"),
        ("Ingreso Mensual por sueldo", "Incrementar 15% en 2026"),
        ("Ingreso Mensual con emprendimiento", "Lograr un 20% adicional al salario")
    ],
    "Relaciones y networking": [
        ("N√∫mero de contactos nuevos", "24 contactos profesionales por mes"),
        ("Reuniones de networking", "1 cada 3 meses")
    ]
}

# =======================
# INICIO APP
# =======================
st.set_page_config(page_title="üìä Tablero de Control Personal", layout="wide")
st.title("üìä Tablero de Control Personal 2026 - 2027")

# Crear dataframe base en session_state
if "df" not in st.session_state:
    rows = []
    for estrategia, kpis in estrategias.items():
        for kpi, meta in kpis:
            rows.append([estrategia, kpi, meta, "üü• Rojo", 0, ""])
    st.session_state.df = pd.DataFrame(rows, columns=["Estrategia", "KPI", "Meta", "Sem√°foro", "Progreso", "Comentarios"])

df = st.session_state.df

# =======================
# FORMULARIO DE SEGUIMIENTO
# =======================
st.sidebar.header("‚ûï Agregar / Actualizar Progreso")
estrategia_sel = st.sidebar.selectbox("Estrategia", list(estrategias.keys()))
kpi_sel = st.sidebar.selectbox("KPI asociado", [k[0] + " - " + k[1] for k in estrategias[estrategia_sel]])
progreso = st.sidebar.slider("Progreso (%)", 0, 100, 0)
comentario = st.sidebar.text_area("Comentarios / Acciones")
semaforo = st.sidebar.selectbox("Sem√°foro", ["üü• Rojo", "üü® Amarillo", "üü© Verde"])

if st.sidebar.button("Guardar actualizaci√≥n"):
    # extraer solo el KPI (parte izquierda antes del gui√≥n)
    kpi_name = kpi_sel.split(" - ")[0]
    # actualizar DataFrame
    df.loc[df["KPI"] == kpi_name, ["Progreso", "Comentarios", "Sem√°foro"]] = [progreso, comentario, semaforo]
    st.success("‚úÖ Registro actualizado correctamente.")

# =======================
# TABLERO PRINCIPAL
# =======================
st.subheader("üìã Tablero Actualizado")
st.dataframe(df, use_container_width=True)

# =======================
# GR√ÅFICOS KPI
# =======================
st.subheader("üìà Visualizaci√≥n de KPIs")

fig = px.bar(df, x="KPI", y="Progreso", color="Sem√°foro",
             title="Progreso por KPI", text="Progreso")
fig.update_traces(texttemplate='%{text}%', textposition="outside")
st.plotly_chart(fig, use_container_width=True)

# =======================
# RESUMEN GENERAL
# =======================
st.subheader("üìä Resumen General")
resumen = df.groupby("Sem√°foro").size().reset_index(name="Cantidad")
st.dataframe(resumen)

pie = px.pie(resumen, values="Cantidad", names="Sem√°foro", title="Estado General del Tablero")
st.plotly_chart(pie, use_container_width=True)
